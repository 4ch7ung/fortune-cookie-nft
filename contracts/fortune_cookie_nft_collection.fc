#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "op-codes.fc";

;; Fortune Cookie NFT collection smart contract
;; based on NFT collection smart contract

const err::batch_limit = 399;
const err::not_owner = 401;
const err::index_out_of_range = 402;
const err::bounds_mismatch = 554;
const err::unknown_op = 0xffff;

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

(slice, int, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return
    (ds~load_msg_addr(), ;; owner_address
     ds~load_uint(64), ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref()  ;; royalty_params
     );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell()
    .store_uint(item_index, 64)
    .store_slice(my_address())
    .end_cell();
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(nft_item_code)
    .store_dict(data)
    .store_uint(0, 1)
    .end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), SEND_MODE_PAY_FEES_SEPARATELY); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE); ;; carry all the remaining value of the inbound message
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    throw_unless(err::not_owner, equal_slices(sender_address, owner_address));

    ;; mint#00000001 query_id:uint64 item_index:uint64 value:Grams nft_init_message:^NftInitMessage = MintPayload;
    ;; nft_init_message#_ owner_addr:MsgAddress lower_bound:uint32 upper_bound:uint32 = NftInitMessage;
    if (op == 1) { ;; deploy new nft
      int item_index = in_msg_body~load_uint(64);
      throw_unless(err::index_out_of_range, item_index <= next_item_index);
      int value = in_msg_body~load_coins();

      cell nft_init_message = in_msg_body~load_ref();
      slice nm = nft_init_message.begin_parse();
      nm~load_msg_addr(); ;; ignore the address
      int lower_bound = nm~load_uint(32);
      int upper_bound = nm~load_uint(32);
      throw_unless(err::bounds_mismatch, lower_bound <= upper_bound);
      
      var is_last = item_index == next_item_index;
      deploy_nft_item(item_index, nft_item_code, value, nft_init_message);
      if (is_last) {
        next_item_index += 1;
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
      }
      return ();
    }
    ;; batch#00000002 deploy_list:^(Hashmap 64 NftBatchInitMessage) = BatchPayload;
    ;; nft_batch_init_message#_ value:Grams nft_init_message:^NftInitMessage = NftBatchInitMessage;
    ;;
    ;; the keys of a hashmap are item indexes
    if (op == 2) { ;; batch deploy of new nfts
      int counter = 0;
      cell deploy_list = in_msg_body~load_ref();
      do {
        var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
        if (f?) {
          counter += 1;
          if (counter >= 250) { ;; Limit due to limits of action list size
            throw(err::batch_limit);
          }
          throw_unless(err::index_out_of_range + counter + 1, item_index <= next_item_index);

          int value = item~load_coins();
          
          cell item_init_message = item~load_ref();
          slice nm = item_init_message.begin_parse();
          nm~load_msg_addr(); ;; ignore the address
          int lower_bound = nm~load_uint(32);
          int upper_bound = nm~load_uint(32);
          throw_unless(err::bounds_mismatch, lower_bound <= upper_bound);

          throw_unless(err::bounds_mismatch + counter + 1, lower_bound <= upper_bound);

          deploy_nft_item(item_index, nft_item_code, value, item_init_message);
          if (item_index == next_item_index) {
            next_item_index += 1;
          }
        }
      } until ( ~ f?);
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
      return ();
    }
    if (op == 3) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, next_item_index, content, nft_item_code, royalty_params);
      return ();
    }
    throw(err::unknown_op);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16),    ;; numerator
             rs~load_uint(16),    ;; denominator
             rs~load_msg_addr()); ;; destination address
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, content, _, _) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
            .store_uint(1, 8) ;; offchain tag
            .store_slice(common_content)
            .store_ref(individual_nft_content)
          .end_cell());
}
